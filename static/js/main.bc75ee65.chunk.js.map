{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","onSubmit","this","props","getWeather","type","name","placeholder","React","Component","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","async","preventDefault","target","elements","value","fetch","api_call","json","data","setState","main","temp","sys","weather","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kPASeA,EAPA,kBACX,6BACI,wBAAIC,UAAU,0BAAd,kBACA,uBAAGA,UAAU,6BAAb,qDCWOC,E,iLAVP,OACI,0BAAMC,SAAUC,KAAKC,MAAMC,YACvB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,oD,GANGC,IAAMC,WCkCVC,EAnCC,SAAAP,GAAK,OACjB,yBAAKJ,UAAU,iBAEXI,EAAMQ,MAAQR,EAAMS,SAAW,uBAAGb,UAAU,gBAAb,YAC3B,0BAAMA,UAAU,kBAAhB,IAAmCI,EAAMQ,KAAzC,KAAiDR,EAAMS,UAK3DT,EAAMU,aAAe,uBAAGd,UAAU,gBAAb,eACjB,0BAAMA,UAAU,kBAAhB,IAAmCI,EAAMU,cAK7CV,EAAMW,UAAY,uBAAGf,UAAU,gBAAb,YACd,0BAAMA,UAAU,kBAAhB,IAAmCI,EAAMW,WAK7CX,EAAMY,aAAe,uBAAGhB,UAAU,gBAAb,cACjB,0BAAMA,UAAU,kBAAhB,IAAmCI,EAAMY,cAK7CZ,EAAMa,OAAS,uBAAGjB,UAAU,kBACvBI,EAAMa,SCzBbC,EAAU,mCA8EDC,E,2MA3EXC,MAAQ,CACJN,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EAGXhB,WAAa,SAAOiB,GAAP,qBAAAC,EAAAC,OAAA,uDAETF,EAAEG,iBAEIb,EAAOU,EAAEI,OAAOC,SAASf,KAAKgB,MAC9Bf,EAAUS,EAAEI,OAAOC,SAASd,QAAQe,MALjC,WAAAL,EAAA,MAQcM,MAAM,oDAAD,OAAqDjB,EAArD,YAA6DC,EAA7D,kBAA8EK,EAA9E,mBARnB,cAQHY,EARG,kBAAAP,EAAA,MASUO,EAASC,QATnB,OASHC,EATG,OAYNpB,GAAQC,EACP,EAAKoB,SAAS,CACVnB,YAAakB,EAAKE,KAAKC,KACvBvB,KAAMoB,EAAKzB,KACXM,QAASmB,EAAKI,IAAIvB,QAClBE,SAAUiB,EAAKE,KAAKnB,SACpBC,YAAagB,EAAKK,QAAQ,GAAGrB,YAC7BC,MAAO,KAGX,EAAKgB,SAAS,CACVnB,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,MAAO,4BA5BN,uC,wEAkCT,OACI,6BACI,yBAAKjB,UAAU,WACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,4BACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,2BACX,kBAAC,EAAD,CAAMK,WAAYF,KAAKE,aACvB,kBAAC,EAAD,CACAS,YAAaX,KAAKiB,MAAMN,YACxBF,KAAMT,KAAKiB,MAAMR,KACjBC,QAASV,KAAKiB,MAAMP,QACpBE,SAAUZ,KAAKiB,MAAML,SACrBC,YAAab,KAAKiB,MAAMJ,YACxBC,MAAOd,KAAKiB,MAAMH,kB,GA7DpCR,IAAMC,WCIJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.bc75ee65.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = () => (\r\n    <div>\r\n        <h1 className=\"title-container__title\">Weather Finder</h1>\r\n        <p className=\"title-container__subtitle\">Find out temperature, conditions and more . . .</p>\r\n    </div>\r\n);\r\n\r\nexport default Titles;\r\n\r\n","import React from \"react\";\r\n\r\n// Alternate way of coding a stateless componenet. The code in Weather.js is preffered. This code is kept for future educational comparisons\r\n\r\nclass Form extends React.Component{\r\n    render(){\r\n        return(\r\n            <form onSubmit={this.props.getWeather}>\r\n                <input type=\"text\" name=\"city\" placeholder=\"City...\"></input>\r\n                <input type=\"text\" name=\"country\" placeholder=\"Country...\"></input>\r\n                <button>Get Weather</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\n// This is a stateless componenet and is coded differently to Form.js to improve code and is preffered\r\nconst Weather = props => (   \r\n    <div className=\"weather__info\">\r\n        {\r\n        props.city && props.country && <p className=\"weather__key\">Location: \r\n            <span className=\"weather__value\"> {props.city}, {props.country}</span>\r\n            </p>\r\n        }\r\n\r\n        {\r\n        props.temperature && <p className=\"weather__key\">Temperature: \r\n            <span className=\"weather__value\"> {props.temperature}</span>\r\n            </p>\r\n        }\r\n\r\n        {\r\n        props.humidity && <p className=\"weather__key\">Humidity: \r\n            <span className=\"weather__value\"> {props.humidity}</span>\r\n            </p>\r\n        }\r\n\r\n        {\r\n        props.description && <p className=\"weather__key\">Conditions: \r\n            <span className=\"weather__value\"> {props.description}</span>\r\n            </p>\r\n        }\r\n\r\n        {\r\n        props.error && <p className=\"weather__error\">\r\n            {props.error}\r\n            </p>\r\n        }\r\n\r\n    </div> \r\n);\r\n\r\nexport default Weather;","import React from \"react\";\r\n\r\nimport Titles from \"./components/Titles\"\r\nimport Form from \"./components/Form\"\r\nimport Weather from \"./components/Weather\"\r\n\r\nconst API_KEY = \"03d7b5f0fdd5b6d2472c1db7e4353797\"\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        error: undefined\r\n    }\r\n\r\n    getWeather = async (e) => {\r\n        // Prevent page refresh\r\n        e.preventDefault();\r\n        // Get the values of city and country from form inputs\r\n        const city = e.target.elements.city.value;\r\n        const country = e.target.elements.country.value;\r\n\r\n        // Api call to URL to get weather data\r\n        const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`); \r\n        const data = await api_call.json();\r\n\r\n        // If city and country have been entered\r\n        if(city && country){\r\n            this.setState({\r\n                temperature: data.main.temp,\r\n                city: data.name,\r\n                country: data.sys.country,\r\n                humidity: data.main.humidity,\r\n                description: data.weather[0].description,\r\n                error: \"\"\r\n            });\r\n        }else{\r\n            this.setState({\r\n                temperature: undefined,\r\n                city: undefined,\r\n                country: undefined,\r\n                humidity: undefined,\r\n                description: undefined,\r\n                error: \"Please enter the values\"\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <div className=\"wrapper\">\r\n                    <div className=\"main\">\r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-xs-5 title-container\">\r\n                                    <Titles />\r\n                                </div>\r\n                                <div className=\"col-xs-7 form-container\">\r\n                                    <Form getWeather={this.getWeather} />\r\n                                    <Weather \r\n                                    temperature={this.state.temperature} \r\n                                    city={this.state.city}\r\n                                    country={this.state.country}\r\n                                    humidity={this.state.humidity}\r\n                                    description={this.state.description}\r\n                                    error={this.state.error}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                </div> \r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport \"./App.css\"\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}